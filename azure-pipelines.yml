# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: Build-$(Build.BuildId)

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
jobs:
  - job: Build
    steps:
    - task: Bash@3
      name: Gradle_build
      displayName: Gradle build
      inputs:
        targetType: 'inline'
        script: |
          echo "=========== Gradle build start =============="
          #sh "gradle clean build copyDriversToBuild"
          echo "=========== In Progress =============="  
          echo "=========== Finish =============="
          build_result=$?

          if [[ $build_result == '0' ]]
          then 
            echo "=========== Deploying start =============="
            #rm -rf ${app_home}/*
            #cp build/libs/capbuilderlogodigitizingservice-* ${app_home}/capbuilderlogodigitizingservice.jar
            #cp -r src/main/resources/drivers/* ${app_home}/
            #sudo systemctl restart capbuilderautomate.service
            echo "=========== Deploying end ================"
          else
            echo "=========== Deploying failed ================"
            exit 1
          fi
      env:
        BUILD_ID: $(Build.BuildId)
    - task: Bash@3
      name: Server_check
      displayName: Server check
      inputs:
        targetType: 'inline'
        script: |
          echo "=========== Server checking =============="
          sleep 30 
          #curl -w %{http_code} --output /dev/null -fksILX GET http://127.0.0.1:8080/savecap
          if [[ $? == '0' ]]
          then 
          echo "=========== Cheking finished =============="
          else
            echo "=========== Server not started ================"
            exit 1
          fi
      env:
        BUILD_ID: $(Build.BuildId)    
    - task: Bash@3
      name: Artifacts_upload
      displayName: Artifacts upload
      inputs:
        targetType: 'inline'
        script: |
          sh "mkdir -p ${app_home}/artifact"
          echo  "Copy drivers"
          sh "cp -r ${WORKSPACE}/${app_dir}/src/main/resources/drivers/* ${app_home}/ && cp -r ${WORKSPACE}/${app_dir}/src/main/resources/drivers/* ${app_home}/artifact/"
          echo  "Rename artifact"
          sh "cp ${app_home}/capbuilderlogodigitizingservice.jar ${app_home}/artifact/cb_service-${VERSION}.jar"
          echo  "zip artifact with drivers" 
          sh "cd ${app_home}/artifact/ && zip -r cb_service-${VERSION}.zip  ./*"
          echo  "Specify artifactory server" 
      env:
        BUILD_ID: $(Build.BuildId)
    # - task: PublishPipelineArtifact@1
    #   name: publish_Config
    #   displayName: Publish hybrisServer-Config.zip
    #   enabled: ${{ parameters.ENABLED_TASKS.publish_Config }}
    #   inputs:
    #     targetPath: '${app_home}/artifact/cb_service-${VERSION}.zip'
    #     artifact: 'hybrisServer-Config-$(A_VERSION).zip'
    #     publishLocation: 'pipeline'
    #   env:
    #     app_home: '/opt/capbuilder_service'
    #     app_dir : 'services/capbuilderlogodigitizingservice'
    #     VERSION : ''
    #     BUILD_ID: $(Build.BuildId)  