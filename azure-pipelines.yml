# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

name: Build-$(Build.BuildId)

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
jobs:
  - job: Build
    steps:
    - task: Bash@3
      name: Gradle_build
      displayName: Gradle build
      inputs:
        targetType: 'inline'
        script: |
          echo "=========== Gradle build start =============="
          #sh "gradle clean build copyDriversToBuild"
          echo "=========== In Progress =============="  
          echa "=========== Finish =============="
          build_result=$?

          if [[ $build_result == '0' ]]
          then 
            echo "=========== Deploying start =============="
            #rm -rf ${app_home}/*
            #cp build/libs/capbuilderlogodigitizingservice-* ${app_home}/capbuilderlogodigitizingservice.jar
            #cp -r src/main/resources/drivers/* ${app_home}/
            #sudo systemctl restart capbuilderautomate.service
            echo "=========== Deploying end ================"
          else
            exit 1
          fi
      env:
        BUILD_ID: $(Build.BuildId)
    - task: Bash@3
      name: Server_check
      displayName: Server check
      inputs:
        targetType: 'inline'
        script: |
          echo "=========== Server checking =============="
          sleep 30 
          #curl -w %{http_code} --output /dev/null -fksILX GET http://127.0.0.1:8080/savecap
          if [[ $? == '0' ]]
          then 
          echo "=========== Cheking finished =============="
          else
            exit 1
          fi
      env:
        BUILD_ID: $(Build.BuildId)    